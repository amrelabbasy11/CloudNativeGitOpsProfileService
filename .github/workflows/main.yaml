name: App-CI-CD
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: eu-north-1
  EKS_CLUSTER: eks-cluster

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5.0.0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Maven Test
        run: mvn test

      - name: Checkstyle
        run: mvn checkstyle:check || echo "Checkstyle skipped"

      - name: Setup Sonar Scanner
        uses: warchant/setup-sonar-scanner@v7

      - name: SonarCloud Scan
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.sources=src \
            -Dsonar.java.binaries=target/classes

  Build_And_Publish:
    runs-on: ubuntu-latest
    needs: Testing
    steps:
      - uses: actions/checkout@v5.0.0

      - name: Build & Push APP Image
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.ECR_REGISTRY }}
          repo: ${{ secrets.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          tags: app-latest
          dockerfile: ./Docker-app/Dockerfile
          context: .

      - name: Build & Push DB Image
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.ECR_REGISTRY }}
          repo: ${{ secrets.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          tags: db-latest
          dockerfile: ./Docker-db/Dockerfile
          context: ./Docker-db  

      - name: Build & Push WEB Image
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.ECR_REGISTRY }}
          repo: ${{ secrets.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          tags: web-latest
          dockerfile: ./Docker-web/Dockerfile
          context: ./Docker-web

  Deploy:
    runs-on: ubuntu-latest
    needs: Build_And_Publish
    steps:
      - uses: actions/checkout@v5.0.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # FIX: Save kubeconfig to a file in the workspace for persistence
      - name: Update kubeconfig and save to file
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }} --kubeconfig ${{ github.workspace }}/kubeconfig.yaml

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Install Python dependencies for Ansible Kubernetes
        run: |
          python3 -m pip install --upgrade pip
          pip install openshift pyyaml kubernetes

      # NEW: Required for the kubernetes.core.k8s module
      - name: Install Kubernetes Ansible Collection
        run: ansible-galaxy collection install kubernetes.core

      # FIX: Debug step to show the ansible directory structure
      - name: Debug - List ansible directory contents
        run: ls -la ansible/

      # FIX: Pass the absolute path to the kubeconfig file as an extra variable
      - name: Run Ansible Playbook for ArgoCD
        run: ansible-playbook -i ansible/inventory.ini ansible/install-argocd.yaml -e "kubeconfig_path=${{ github.workspace }}/kubeconfig.yaml"
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml

      - name: Run Ansible Playbook for Monitoring
        run: ansible-playbook -i ansible/inventory.ini ansible/install-kube-prometheus-stack.yaml -e "kubeconfig_path=${{ github.workspace }}/kubeconfig.yaml"
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml

      # The following steps are redundant if done by Ansible, but kept for completeness
      - name: Install Helm
        run: curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && chmod +x get_helm.sh && ./get_helm.sh

      - name: Deploy Monitoring (Helm - Redundant if Ansible worked)
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install kube-prom prometheus-community/kube-prometheus-stack -n monitoring --create-namespace --kubeconfig ${{ github.workspace }}/kubeconfig.yaml

      - name: Deploy ArgoCD (kubectl - Redundant if Ansible worked)
        run: |
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f - --kubeconfig ${{ github.workspace }}/kubeconfig.yaml
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml --kubeconfig ${{ github.workspace }}/kubeconfig.yaml
          kubectl rollout status deployment argocd-server -n argocd --kubeconfig ${{ github.workspace }}/kubeconfig.yaml

      - name: Apply ArgoCD App CR
        run: kubectl apply -f argocd/argocd-app.yaml -n argocd --kubeconfig ${{ github.workspace }}/kubeconfig.yaml
